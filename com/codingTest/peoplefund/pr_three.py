# list랑 query 해서 query에 해당되는 숫자 array return
# 단 문자가 완전히 동일한 경우는 포함안한다.

def findCompletePrefixes(names, query):
    # count 결과 담을 list
    result_list = []

    # query문
    for q in query:
        temp_set = set()
        for data in names:
            if q in data and q != data:
                temp_set.add(data)
        result_list.append(len(temp_set))

    return result_list


print(findCompletePrefixes(['steve', 'stevens', 'danny', 'steves', 'dan', 'john', 'johnny', 'joe', 'alex', 'alexander'],
                           ['steve', 'alex', 'joe', 'john', 'dan']))

# 11
# 2
# 0
# 0
# 0
# 0
# 1
# 1
# 1
# 0
# 1
# 1
# 0
# 3
# 5
# 0
# 0
# 38
# 1
# 4
# 0
# 1
# 0
# 0
# 84
# 0
# 142
# 0
# 17
# 6
# 1
# 2
# 54
# 0
# 0
# 0
# 0
# 0
# 0
# 3
# 1
# 3
# 2
# 0
# 1
# 0
# 1
# 23
# 0
# 3
# 0
# 1
# 3
# 11
# 0
# 1
# 17
# 57
# 1
# 1
# 1
# 1
# 0
# 0
# 0
# 0
# 6
# 0
# 4
# 54
# 0
# 0
# 1
# 1
# 0
# 0
# 0
# 0
# 0
# 0
# 1
# 1
# 1
# 0
# 21
# 3
# 3
# 0
# 0
# 1
# 0
# 10
# 1
# 1
# 3
# 0
# 0
# 3
# 15
# 2
# Expected Output
#
# Download
# 11
# 2
# 0
# 0
# 0
# 0
# 1
# 1
# 1
# 0
# 1
# 1
# 0
# 3
# 5
# 0
# 0
# 38
# 1
# 4
# 0
# 1
# 0
# 0
# 36
# 0
# 119
# 0
# 17
# 6
# 1
# 2
# 54
# 0
# 0
# 0
# 0
# 0
# 0
# 3
# 1
# 3
# 2
# 0
# 1
# 0
# 1
# 23
# 0
# 3
# 0
# 1
# 3
# 2
# 0
# 1
# 17
# 57
# 1
# 1
# 1
# 1
# 0
# 0
# 0
# 0
# 6
# 0
# 4
# 42
# 0
# 0
# 1
# 1
# 0
# 0
# 0
# 0
# 0
# 0
# 1
# 1
# 1
# 0
# 21
# 3
# 3
# 0
# 0
# 1
# 0
# 10
# 1
# 1
# 3
# 0
# 0
# 3
# 15
# 2

# qqfnxukd

# [drjwi,
# hluwpeytkgasyx,
# bufjpgypvkojljbdk
# ulipjjmqjifjdb
# tryckrktdpqjtn
# qqrzplnmtnrndvmrl
# fjxycfcn
# jypbbeed
# ulipjjmqjifexj
# xjtwdugolufbnimlhqdz
# tjmsbdnuibbjct
# xjtwdxamuuvghrzll
# qdeyyslqemk
# cbvzd
# gcyiobqgfsr
# fjehmhqpbhhgztdnr
# xjuvfcugbfb
# fjehmhqp
# drmxsymgywulolxjpzsk
# xjtwdugolufbnipeg
# fjehmhqpjqvtgqskm
# ulipjaam
# fjxzxulxcen
# zfmstygrfgm
# hl
# phwohvqecnctuwkdu
# fj
# uzyaxpvvekj
# xjtwdxamuuv
# jxqmhjhxujb
# fvzahybt
# zfgdtzcxrxuppt
# fjehm
# nppfypgp
# fjehmhqpbhhanq
# tjmsbdnulwx
# jxqmhjhxryqwgjtrtnqy
# gcyiobqgclvhtj
# rqippyfs
# tjuro
# oxlhxgiduokhci
# jxqmhmzn
# qqrzplnmtnrorq
# fjxycgjvvhx
# ulqsztrxfpyach
# qdghc
# ssthsnbw
# drmxsymg
# hlstdxmmsfnuakugw
# oxlhxgid
# fjehmhqpjqvtgqooc
# gcyionux
# fjehmhqpwpu
# ub
# xjtwdugozewlbaefzuzicou
# bufjpgypvkojlj
# ulqsztrxfpy
# tryck
# tryckinh
# fjmmxmlcslwoohdbd
# jxqmhjhxryqwgjadp
# fjehmmultfyowe
# ulipjayutagqekizr
# tjgwnepgrue
# tryckuxdsvoagsobwleuczmbjc
# tryckuxdsvotjlhre
# tryckuxdsvoagsobw
# xjtwdugolufbnipegvvlgldxdf
# qdbncqyx
# np
# fjvuopyr
# fvzahdevturybuqwd
# cbylebhz
# fvzahrxayowonn
# nplcuhqagaokzgymt
# gcynrjhloljaepiuhwakpsfqpr
# fvzahdevtmy
# bufjpjatjygyco
# gcynrjhloljaepcczdljomo
# zfmstgswjru
# gcyiobqgqvmwtr
# hxtuiopz
# zfdtt
# gcynrjhlhdqkpdtfxdmd
# phwoh
# zfmstgsw
# yulns
# ddspmqfl
# fjxzxulxrsjbpp
# nplcusgu
# bufjpgypcam
# nplcuhqa
# uzyaxssrwnz
# tryckuxdsvotjlyhkxmp
# jxqmhjhxryqwgjtrtgxw
# jypbbfdmbsuhea
# sszifncdezk
# qqrzplnmmnx
# jxqmhjhxryq
# cbvzdyty]